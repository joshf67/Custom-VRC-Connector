{
  "api/Example.html": {
    "href": "api/Example.html",
    "title": "Namespace Example | Server Connector documentation",
    "keywords": "Namespace Example Classes UdonHashLib"
  },
  "api/Example.UdonHashLib.html": {
    "href": "api/Example.UdonHashLib.html",
    "title": "Class UdonHashLib | Server Connector documentation",
    "keywords": "Class UdonHashLib Inheritance Object UdonHashLib Namespace : Example Assembly : cs.temp.dll.dll Syntax public class UdonHashLib : UdonSharpBehaviour Methods MD5_Bytes(Byte[]) Declaration public string MD5_Bytes(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description String MD5_UTF8(String) Declaration public string MD5_UTF8(string text) Parameters Type Name Description String text Returns Type Description String SHA1_Bytes(Byte[]) Declaration public string SHA1_Bytes(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description String SHA1_UTF8(String) Declaration public string SHA1_UTF8(string text) Parameters Type Name Description String text Returns Type Description String SHA224_Bytes(Byte[]) Declaration public string SHA224_Bytes(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description String SHA224_UTF8(String) Declaration public string SHA224_UTF8(string text) Parameters Type Name Description String text Returns Type Description String SHA256_Bytes(Byte[]) Declaration public string SHA256_Bytes(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description String SHA256_UTF8(String) Declaration public string SHA256_UTF8(string text) Parameters Type Name Description String text Returns Type Description String SHA384_Bytes(Byte[]) Declaration public string SHA384_Bytes(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description String SHA384_UTF8(String) Declaration public string SHA384_UTF8(string text) Parameters Type Name Description String text Returns Type Description String SHA512_Bytes(Byte[]) Declaration public string SHA512_Bytes(byte[] data) Parameters Type Name Description Byte [] data Returns Type Description String SHA512_UTF8(String) Declaration public string SHA512_UTF8(string text) Parameters Type Name Description String text Returns Type Description String"
  },
  "api/Joshf67.ServerConnector.Example.ExampleDatabaseConnector.html": {
    "href": "api/Joshf67.ServerConnector.Example.ExampleDatabaseConnector.html",
    "title": "Class ExampleDatabaseConnector | Server Connector documentation",
    "keywords": "Class ExampleDatabaseConnector Example connector to show how to connect to a databse and read/update values Inheritance Object ExampleDatabaseConnector Namespace : Joshf67.ServerConnector.Example Assembly : cs.temp.dll.dll Syntax public class ExampleDatabaseConnector : Connector Fields AddItemField Declaration public InputField AddItemField Field Value Type Description InputField ExampleResponseParser Declaration public ExampleServerResponse ExampleResponseParser Field Value Type Description ExampleServerResponse hasher Declaration protected UdonHashLib hasher Field Value Type Description UdonHashLib itemField Declaration public Text itemField Field Value Type Description Text passwordField Declaration public InputField passwordField Field Value Type Description InputField RemoveItemField Declaration public InputField RemoveItemField Field Value Type Description InputField responseField Declaration public Text responseField Field Value Type Description Text usernameField Declaration public InputField usernameField Field Value Type Description InputField Methods AddItem() Queue up an add item message to the server and attempt to add it Declaration public void AddItem() ConvertSHA256ToMessage(String) Convert a SHA256 hash into a shorter 9 character hash to decrease login message time, This decreases the security and increase the chance of collision but due to 2.5s rate limiting this is required to make it reasonable Declaration public string ConvertSHA256ToMessage(string hash) Parameters Type Name Description String hash The string to hash Returns Type Description String A 9 character string message of the hashed value ConvertTextToHash(String) Converts a text to SHA512 using UdonHashLib Declaration public string ConvertTextToHash(string text) Parameters Type Name Description String text The text to convert Returns Type Description String A SHA512 hash of the text CreateAccount() Queue up a create account message to the server and attempt to create an account Declaration public void CreateAccount() HandleMessage(String) Accept any responses from the server and handle them Declaration public override void HandleMessage(string response) Parameters Type Name Description String response The response from the server Login() Queue up login messages to send to the server and attempt to log in Declaration public void Login() RemoveItem() Queue up a remove item message to the server and attempt to remove it Declaration public void RemoveItem()"
  },
  "api/Joshf67.ServerConnector.Example.ExampleServerResponse.html": {
    "href": "api/Joshf67.ServerConnector.Example.ExampleServerResponse.html",
    "title": "Class ExampleServerResponse | Server Connector documentation",
    "keywords": "Class ExampleServerResponse Example response to show how to handle server responses Inheritance Object ExampleServerResponse Namespace : Joshf67.ServerConnector.Example Assembly : cs.temp.dll.dll Syntax public class ExampleServerResponse : ServerResponse Methods HandleResponse(DataDictionary, out DataToken) Handles the parsed message Declaration protected override bool HandleResponse(DataDictionary response, out DataToken HandleResult) Parameters Type Name Description DataDictionary response The JSON DataDictionary to be handled DataToken HandleResult The result of the ServerRespons handler Returns Type Description Boolean Boolean if the response was parsed properly"
  },
  "api/Joshf67.ServerConnector.Example.html": {
    "href": "api/Joshf67.ServerConnector.Example.html",
    "title": "Namespace Joshf67.ServerConnector.Example | Server Connector documentation",
    "keywords": "Namespace Joshf67.ServerConnector.Example Classes ExampleDatabaseConnector Example connector to show how to connect to a databse and read/update values ExampleServerResponse Example response to show how to handle server responses InvetorySchema Allows easy parsing of a User's Inventory data through helper functions ItemSchema Allows easy parsing of a User's item data through helper functions UserSchema Allows easy parsing of a User's data through helper functions"
  },
  "api/Joshf67.ServerConnector.Example.InvetorySchema.html": {
    "href": "api/Joshf67.ServerConnector.Example.InvetorySchema.html",
    "title": "Class InvetorySchema | Server Connector documentation",
    "keywords": "Class InvetorySchema Allows easy parsing of a User's Inventory data through helper functions Inheritance Object InvetorySchema Namespace : Joshf67.ServerConnector.Example Assembly : cs.temp.dll.dll Syntax public static class InvetorySchema Methods GetCurrency(DataToken) Get the currency for a user Declaration public static double GetCurrency(DataToken data) Parameters Type Name Description DataToken data The user to get the currency for Returns Type Description Double The user's currency GetCurrency(DataToken, out Double) Get the currency for a user/inventory Declaration public static bool GetCurrency(DataToken data, out double currency) Parameters Type Name Description DataToken data The user/inventory to get the currency for Double currency The resulting user's currency Returns Type Description Boolean Boolean if the user's currency exists GetInventoryItems(DataToken) Get the items for a user/inventory Declaration public static DataList GetInventoryItems(DataToken data) Parameters Type Name Description DataToken data The user/inventory to get the inventory items for Returns Type Description DataList The user's inventory items GetInventoryItems(DataToken, out DataList) Get the items for a user/inventory Declaration public static bool GetInventoryItems(DataToken data, out DataList items) Parameters Type Name Description DataToken data The user/inventory to get the inventory items for DataList items The resulting user's inventory items Returns Type Description Boolean Boolean if the user's inventory items exists IsInventorySchema(DataToken, out DataDictionary) Test if a DataDictionary is actually an Inventory schema Declaration public static bool IsInventorySchema(DataToken data, out DataDictionary inventorySchema) Parameters Type Name Description DataToken data The DataDictionary to test DataDictionary inventorySchema The DataDictionary restult if this is a InventorySchema Returns Type Description Boolean Boolean if the DataDictionary is a Inventory schema"
  },
  "api/Joshf67.ServerConnector.Example.ItemSchema.html": {
    "href": "api/Joshf67.ServerConnector.Example.ItemSchema.html",
    "title": "Class ItemSchema | Server Connector documentation",
    "keywords": "Class ItemSchema Allows easy parsing of a User's item data through helper functions Inheritance Object ItemSchema Namespace : Joshf67.ServerConnector.Example Assembly : cs.temp.dll.dll Syntax public static class ItemSchema Methods GetItemID(DataToken) Get the ItemID for an item Declaration public static double GetItemID(DataToken data) Parameters Type Name Description DataToken data The item to get the ItemID for Returns Type Description Double The Item's ItemID GetItemID(DataToken, out Double) Get the ItemID for an item Declaration public static bool GetItemID(DataToken data, out double itemID) Parameters Type Name Description DataToken data The item to get the ItemID for Double itemID The resulting ItemID Returns Type Description Boolean Boolean if the ItemID exists IsItemSchema(DataToken, out DataDictionary) Test if a DataDictionary is actually a item schema Declaration public static bool IsItemSchema(DataToken data, out DataDictionary itemSchema) Parameters Type Name Description DataToken data The DataDictionary to test DataDictionary itemSchema The DataDictionary restult if this is a ItemSchema Returns Type Description Boolean Boolean if the DataDictionary is a item schema"
  },
  "api/Joshf67.ServerConnector.Example.UserSchema.html": {
    "href": "api/Joshf67.ServerConnector.Example.UserSchema.html",
    "title": "Class UserSchema | Server Connector documentation",
    "keywords": "Class UserSchema Allows easy parsing of a User's data through helper functions Inheritance Object UserSchema Namespace : Joshf67.ServerConnector.Example Assembly : cs.temp.dll.dll Syntax public static class UserSchema Methods GetInventory(DataToken) Get the inventory for a user Declaration public static DataDictionary GetInventory(DataToken data) Parameters Type Name Description DataToken data The user to get the inventory for Returns Type Description DataDictionary The user's inventory GetInventory(DataToken, out DataDictionary) Get the inventory for a user Declaration public static bool GetInventory(DataToken data, out DataDictionary inventory) Parameters Type Name Description DataToken data The user to get the inventory for DataDictionary inventory The resulting user's inventory Returns Type Description Boolean Boolean if the user inventory exists GetLoginHash(DataToken) Get the login hash for a user Declaration public static string GetLoginHash(DataToken data) Parameters Type Name Description DataToken data The user to get the hash for Returns Type Description String The user's login hash GetLoginHash(DataToken, out String) Test and Get the login hash for a user Declaration public static bool GetLoginHash(DataToken data, out string loginHash) Parameters Type Name Description DataToken data The user to get the hash for String loginHash The resulting user's login hash Returns Type Description Boolean Boolean if the user login hash exists IsUserSchema(DataToken, out DataDictionary) Test if a DataDictionary is actually a user schema Declaration public static bool IsUserSchema(DataToken data, out DataDictionary userSchema) Parameters Type Name Description DataToken data The DataDictionary to test DataDictionary userSchema The DataDictionary restult if this is a UserSchema Returns Type Description Boolean Boolean if the DataDictionary is a user schema"
  },
  "index.html": {
    "href": "index.html",
    "title": "Custom-VRC-Connector | Server Connector documentation",
    "keywords": "Custom-VRC-Connector THIS IS STILL A WIP, IT SHOULD WORK CURRENTLY BUT THERE ARE NO GUARANTEES ANY OF THE IMPLEMENTATIONS ARE GOOD TO USE HTTP Server - Base NPM project to respond to any connection Unity - All code and demo scene (Hopefully shouldn't be broken as it just uses VRCSDK stuff and U#, everything else should be included) Thanks to all of these people for helping along the way: Gorialis - UdonHashLib used for hashing login data Foorack - UdonXML used for parsing the server response Hax - For the MessagePacker script, general help and suggestions on methods to use @Merlin - Creating UdonSharp and for general help with bugs/issues @GlitchyDev, @Miner28 and @BocuD - AvatarImageReader code to read in data from a render texture (old video player method, no longer used, but thanks is still deserved) Modify the url to send data Inside app.js on line 44: app.use('/sendMessage=*', ServerConnector.HandleConnection); change '/sendMessage=*' to whatever you want your messages to be recieved on Setup Server .env file PORT=(string) - The port you want to host the server on MESSAGE_TYPE_BITS=(int) - The amount of bits that will be used for determining the message type MESSAGE_BITS_LENGTH=(int) - The amount of bits that will be sent per message (including the bits used for the type) DATABASE_URL=(string) - The url of the Database, for example: \"mongodb+srv://-----.-----.mongodb.net/-----\" DATABASE_NAME=(string) - The name of the Database DATABASE_CONNECTION_TIMEOUT=(int) - The amount of time to wait until failing a connection to the Database in MS DATABASE_USER_CERT=(string) - The location of the mongodb login certificate relative to HTTP_SERVER folder LOGIN_HASH_CHARACTERS=(int) - The amount of characters your login hash will have PRUNE_INACTIVE_TIME_MINUTES=(int) - The amount of time a user has to be inactive (no messages sent to the server) to remove them and clear their user connection DEVELOPMENT_MODE=(boolean) - Enables logging throughout the server Setup URLS: Connector URL Tool Supply a starting URL, a number of URLs and the \"Generate URLs\" will appear Generate ConnectorUrl Tool Supply a gameObject object to hold URLs, starting URL, a number of URLs and the \"Generate URLs\" button will appear"
  },
  "manual/coniunctis.html": {
    "href": "manual/coniunctis.html",
    "title": "Coniunctis nec qui et lanient monticolae vitae | Server Connector documentation",
    "keywords": "Coniunctis nec qui et lanient monticolae vitae Opem ille Lorem markdownum cavis exululat inutile. Illi quem caeli, vola patruo difficili Iuppiter Patraeque, est ardebant ingeniis Troica intus Amore tibi mirantem superfusis, multum. Ut Achilles Et sitim Tibi modo ait temptant crinita daret Pariter in removi offensasque Lenaeo damno terra Phoebes ut damnosa classis ignes templo; tua ulla capillos ultima. Videre percusso plectro templa fuit diva minimum debere, quid nomen Philomela animis. Verbis istis flagrat vulnera inpediique ignes. Gravi filo obvius arte Amphionis Panes emisitque iubet. Latona te timens Latentia ante, eundem meritorum sunto ! Elige in timuit templa ferrea, qui arma ligati stagnum turbant. Fraternaque aeternus, dedisse, naufragus corripiens ranas Amathunta et quod laetior culpa nec semper scorpius fuit vicem corpora ardere. Fallit in artus primordia, fratres per aliis , ipsi manu Asiae quod marmorea . mountain(googleVga, pngIphone); var radcabBitrate = dnsCronRecursion; gui(2); ipImageAix += vle(drm_cisc, horizontal + computer_key); jre(vaporware_adc_multi); Lumina ut tamen praesentia vidistis nymphae auroque Bromumque in portant furorem. Visa init resurgere praevitiat canibus et, dedignata turea, ilia. Pisenore mensura insula aere nec per o gladium causa: Alcidae. Veris sentes pallet, alta melius nostra amborum probant, deam. Iuventae dedimus nitidaque hunc traxisse sermonibus pectine flecti an pateres, hac ore gelidis foret semper. Sithon pelle. Bracchia Hippason videntur fateri hosti: palpitat animo est reliquit anne nam confusaque. Interea rex altis munera quem quae quoque rorant, rauco albescere scopulo moriensque parvo, pectus illa, quadrupedes. Notavit haec. Vertit pars quem Euryte casu usta iterum! Ablatum pectus corripiunt neu humus tamquam; ducens stellarum amore. Pulsisque latet, ad tamen victor fulva Tirynthius posco; qui inque in poena quidem enses !"
  },
  "manual/etiam.html": {
    "href": "manual/etiam.html",
    "title": "Etiam nantemque exul | Server Connector documentation",
    "keywords": "Etiam nantemque exul Cum tulit Lorem markdownum quos stimulosque altos . Putat nubes molle Troiae vero dea; nostraque plurima . Vos de mihi, credidit: salibus et iacuit, volvitur sunt unda fronti deriguisse refert . Sumpsisse viso Nubila nomine. Purpura se o et causa parva ripas, adsonat saevaque; quid modo ambo et venere voveo. Sine et esse, illa tempore, sive tibi roseo, ministerio altos. Trepident medicamine, primasque cum et peregit dapibusque quoslibet hominis quoque insula. Tepentibus ut Cecropios ab turba, est auro ferventi aliter duratos feres differtis Ausoniis potes, non noctis Laertaque iuvenes. Caelumque vestigia Et promissa fila sentiet leges; Phrygiae et levatus ferire? Salutifer coniugis fierent ante fecissent post vultumque ultima, per radios currere; tandem. Fuerat qua, ne foedera reformatus nunc diu dea audet nonne. Ut utinam mitia tenuerunt movent spectans Mavortis nulla ite, somnos exsiccata dixit Aeetias. Binas Trinacriam album ex ipse. Quoque una utraque tardius placetque gerere; mariti sed dare ludunt memorante Delphice corpora. Caret quantum intellegat venis gaudent eurus. Et suos crista; has et ferarum quid audit omine; mea cum praemia quae duris, suspicor. Adflati qui Spiro conata supprimit diemque; ora oblitus ensem alti non quo lacrimis ferunt, ageret Cebrenida rutilis delendaque? Terras lata modus: nec fas, misi utque adpositis Iunonis. Fide vidit, ferox Schoeneia mundi, voce, tellus pariterque pedum, sic Celadon securior corpora partesque posito. Potest faxo unda pendulaque ille rostro, haesit pars: formidine captat, viseret simulaverat! Sequi est peragit flumineae pallent simulatas formae avulsa, imagine undis; formam. Et nec sed adeunt, huic aequa et ignes nec, medere terram. Move ipsum abnuat retemptat retinebat duabus diu Iovi est pluma. Tecum non deducit Pelops Inachus: arcet aliquemque, regia telo. Tollens altore nec semel qui voce Palatinae Apertis et dei duo inquit ; luna secundo, fervida terret. In haec dextra septima Tydides tibi: congelat hospes nativum radice tegumenque membris Hesperio ne Libys, est vocabula siqua. Dumque stet mulces , ut fontem dea atricolor, est pronos, clarissimus poterat cum intrare sidere templi. cut_metadata(whitelistSequenceUnit.thick.of_bezel_cdma( address_suffix_troubleshooting), sram_trojan(4, hdmi_network - 1)); flash.apache -= web_gps_plug; if (offline.dac_bridge(scrollEbookRom, parameter.internal_target_superscalar(2)) < qwerty + 2 - ipvCgiContextual) { certificateIdeAsp = overclocking + app; supplyCard = siteRaster; } Sagitta curvum quoque petisti opibusque proximitas in, illa vestrum, mihi domum nescia flexit sacra in. Magni vive sim crescente causam saxo voluit, mens, quod. Tela ter ulterius similis illos nato refugit ait verbaque nec fatigatum penates iaculatricemque cecidit pinnas, cum. Misso contigit caelo dedissent lumina; nympha ad vobis occidat, malo sacra utrumque cunctos Diomedeos addita. Virgineus autumnos, ait mitissima curru: fuit sed fessi se habebat hactenus Ultor; meus."
  }
}